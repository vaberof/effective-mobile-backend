// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/car/car_storage.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/car/car_storage.go -destination=internal/domain/car/mocks/mock_car_storage.go
//

// Package mock_car is a generated GoMock package.
package mock_car

import (
	reflect "reflect"

	car "github.com/vaberof/effective-mobile-backend/internal/domain/car"
	gomock "go.uber.org/mock/gomock"
)

// MockCarStorage is a mock of CarStorage interface.
type MockCarStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCarStorageMockRecorder
}

// MockCarStorageMockRecorder is the mock recorder for MockCarStorage.
type MockCarStorageMockRecorder struct {
	mock *MockCarStorage
}

// NewMockCarStorage creates a new mock instance.
func NewMockCarStorage(ctrl *gomock.Controller) *MockCarStorage {
	mock := &MockCarStorage{ctrl: ctrl}
	mock.recorder = &MockCarStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCarStorage) EXPECT() *MockCarStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCarStorage) Create(regNum, mark, model string, year *int16, owner *car.Owner) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", regNum, mark, model, year, owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCarStorageMockRecorder) Create(regNum, mark, model, year, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCarStorage)(nil).Create), regNum, mark, model, year, owner)
}

// Delete mocks base method.
func (m *MockCarStorage) Delete(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCarStorageMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCarStorage)(nil).Delete), id)
}

// ListByFilters mocks base method.
func (m *MockCarStorage) ListByFilters(regNum, mark, model *string, year *int16, limit, offset int) ([]*car.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByFilters", regNum, mark, model, year, limit, offset)
	ret0, _ := ret[0].([]*car.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByFilters indicates an expected call of ListByFilters.
func (mr *MockCarStorageMockRecorder) ListByFilters(regNum, mark, model, year, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByFilters", reflect.TypeOf((*MockCarStorage)(nil).ListByFilters), regNum, mark, model, year, limit, offset)
}

// Update mocks base method.
func (m *MockCarStorage) Update(id int64, regNum, mark, model *string, year *int16, ownerName, ownerSurname, ownerPatronymic *string) (*car.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, regNum, mark, model, year, ownerName, ownerSurname, ownerPatronymic)
	ret0, _ := ret[0].(*car.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCarStorageMockRecorder) Update(id, regNum, mark, model, year, ownerName, ownerSurname, ownerPatronymic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCarStorage)(nil).Update), id, regNum, mark, model, year, ownerName, ownerSurname, ownerPatronymic)
}
